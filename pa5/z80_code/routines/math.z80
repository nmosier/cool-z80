;; Nicholas Mosier 2018

; math.z80
; contains all cool math routines

; also works if numbers signed!
_MUL_HL_DE:
	ld bc,0
	push bc ; top of stack stores accumulator
	xor a
	ld b,16
_MUL_HL_DE.loop:
	add hl,hl
	ex (sp),hl
	jr nc,_MUL_HL_DE.loop.skip
	add hl,hl
	add hl,de
	ex (sp),hl
	djnz _MUL_HL_DE.loop
	jr _MUL_HL_DE.done
_MUL_HL_DE.loop.skip:
	add hl,hl
	ex (sp),hl
	djnz _MUL_HL_DE.loop
_MUL_HL_DE.done:
	pop hl ; restore result
	ret

_DIV_HL_DE:
	xor a ; initialize A to store sign
_DIV_HL_DE.fix_sign_hl:
	bit 7,h
	jr z,_DIV_HL_DE.fix_sign_de
	; negate hl
	ld b,h
	ld c,l ; ld bc,hl
	ld hl,0
	sbc hl,bc ; carry reset, so -hl -> hl
	xor 1 ; update sign bit in A
_DIV_HL_DE.fix_sign_de:
	bit 7,d
	jr z,_DIV_HL_DE.fixed_signs
	; negate de
	ex de,hl
	ld b,h
	ld c,l
	ld hl,0
	sbc hl,bc
	ex de,hl
	xor 1 ; update sign bit of answer
_DIV_HL_DE.fixed_signs:
	push af ; save sign bit
	ld bc,0
	push bc ; initialize accumulator on stack
	xor	a
	ld	b,16
_DIV_HL_DE_loop:
	add	hl,hl
	ex	(sp),hl
	rl	l
	rl	h
	jr	c,_DIV_HL_DE_overflow
	ld	a,h
	cp	d
	jr	c,_DIV_HL_DE_skip
	ld	a,l
	cp	e
	jr	c,_DIV_HL_DE_skip
_DIV_HL_DE_overflow:
	xor a ; faster
	sbc	hl,de
	ex	(sp),hl
	inc	hl
	djnz	_DIV_HL_DE_loop
	jr _DIV_HL_DE.done
_DIV_HL_DE_skip:
	ex	(sp),hl
	djnz	_DIV_HL_DE_loop
_DIV_HL_DE.done:
	pop de ; remainder?
	pop af ; restore sign of result
	or a
	ret z ; if positive, return result
	ex de,hl
	ld hl,0
	sbc hl,de ; else negate result
	ret