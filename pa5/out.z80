_int_tag:
	.dw	2
_bool_tag:
	.dw	3
_string_tag:
	.dw	4
_MemMgr_INITIALIZER:
	.dw	_NoGC_Init
_MemMgr_COLLECTOR:
	.dw	_NoGC_Collect
_MemMgr_TEST:
	.dw	0
	.dw	-1
str_const21:
	.dw	4
	.dw	5
	.dw	String_dispTab
	.dw	int_const3
	.db	0	
	.dw	-1
str_const20:
	.dw	4
	.dw	11
	.dw	String_dispTab
	.dw	int_const5
	.db	"<basic class>"
	.db	0	
	.dw	-1
str_const19:
	.dw	4
	.dw	10
	.dw	String_dispTab
	.dw	int_const0
	.db	"TestString"
	.db	0	
	.dw	-1
str_const18:
	.dw	4
	.dw	13
	.dw	String_dispTab
	.dw	int_const6
	.db	"SELF_TYPE = Main\n"
	.db	0	
	.dw	-1
str_const17:
	.dw	4
	.dw	12
	.dw	String_dispTab
	.dw	int_const7
	.db	"SELF_TYPE = A\n"
	.db	0	
	.dw	-1
str_const16:
	.dw	4
	.dw	9
	.dw	String_dispTab
	.dw	int_const8
	.db	"Example!\n"
	.db	0	
	.dw	-1
str_const15:
	.dw	4
	.dw	19
	.dw	String_dispTab
	.dw	int_const9
	.db	"either obj or obj2 not void.\n"
	.db	0	
	.dw	-1
str_const14:
	.dw	4
	.dw	17
	.dw	String_dispTab
	.dw	int_const10
	.db	"obj and obj2 both void.\n"
	.db	0	
	.dw	-1
str_const13:
	.dw	4
	.dw	15
	.dw	String_dispTab
	.dw	int_const11
	.db	"new Objetc "
	.db	226
	.db	137
	.db	160
	.db	" void.\n"
	.db	0	
	.dw	-1
str_const12:
	.dw	4
	.dw	14
	.dw	String_dispTab
	.dw	int_const12
	.db	"new Object = void.\n"
	.db	0	
	.dw	-1
str_const11:
	.dw	4
	.dw	19
	.dw	String_dispTab
	.dw	int_const9
	.db	"while loop returns non-void.\n"
	.db	0	
	.dw	-1
str_const10:
	.dw	4
	.dw	17
	.dw	String_dispTab
	.dw	int_const13
	.db	"while loop returns void.\n"
	.db	0	
	.dw	-1
str_const9:
	.dw	4
	.dw	13
	.dw	String_dispTab
	.dw	int_const6
	.db	"obj is not void.\n"
	.db	0	
	.dw	-1
str_const8:
	.dw	4
	.dw	11
	.dw	String_dispTab
	.dw	int_const5
	.db	"obj is void.\n"
	.db	0	
	.dw	-1
str_const7:
	.dw	4
	.dw	25
	.dw	String_dispTab
	.dw	int_const14
	.db	"testing evaluation order in binary ops: "
	.db	0	
	.dw	-1
str_const6:
	.dw	4
	.dw	24
	.dw	String_dispTab
	.dw	int_const15
	.db	"testing evaluation order in dispatch: "
	.db	0	
	.dw	-1
str_const5:
	.dw	4
	.dw	12
	.dw	String_dispTab
	.dw	int_const7
	.db	"ints i1"
	.db	226
	.db	128
	.db	147
	.db	"i5: "
	.db	0	
	.dw	-1
str_const4:
	.dw	4
	.dw	13
	.dw	String_dispTab
	.dw	int_const6
	.db	"integer (after): "
	.db	0	
	.dw	-1
str_const3:
	.dw	4
	.dw	5
	.dw	String_dispTab
	.dw	int_const4
	.db	"\n"
	.db	0	
	.dw	-1
str_const2:
	.dw	4
	.dw	14
	.dw	String_dispTab
	.dw	int_const12
	.db	"\tinteger (before): "
	.db	0	
	.dw	-1
str_const1:
	.dw	4
	.dw	12
	.dw	String_dispTab
	.dw	int_const16
	.db	"testing let...\n"
	.db	0	
	.dw	-1
str_const0:
	.dw	4
	.dw	13
	.dw	String_dispTab
	.dw	int_const6
	.db	"../pa5/example.cl"
	.db	0	
	.dw	-1
int_const16:
	.dw	2
	.dw	4
	.dw	Int_dispTab
	.dw	15
	.dw	-1
int_const15:
	.dw	2
	.dw	4
	.dw	Int_dispTab
	.dw	38
	.dw	-1
int_const14:
	.dw	2
	.dw	4
	.dw	Int_dispTab
	.dw	40
	.dw	-1
int_const13:
	.dw	2
	.dw	4
	.dw	Int_dispTab
	.dw	25
	.dw	-1
int_const12:
	.dw	2
	.dw	4
	.dw	Int_dispTab
	.dw	19
	.dw	-1
int_const11:
	.dw	2
	.dw	4
	.dw	Int_dispTab
	.dw	21
	.dw	-1
int_const10:
	.dw	2
	.dw	4
	.dw	Int_dispTab
	.dw	24
	.dw	-1
int_const9:
	.dw	2
	.dw	4
	.dw	Int_dispTab
	.dw	29
	.dw	-1
int_const8:
	.dw	2
	.dw	4
	.dw	Int_dispTab
	.dw	9
	.dw	-1
int_const7:
	.dw	2
	.dw	4
	.dw	Int_dispTab
	.dw	14
	.dw	-1
int_const6:
	.dw	2
	.dw	4
	.dw	Int_dispTab
	.dw	17
	.dw	-1
int_const5:
	.dw	2
	.dw	4
	.dw	Int_dispTab
	.dw	13
	.dw	-1
int_const4:
	.dw	2
	.dw	4
	.dw	Int_dispTab
	.dw	1
	.dw	-1
int_const3:
	.dw	2
	.dw	4
	.dw	Int_dispTab
	.dw	0
	.dw	-1
int_const2:
	.dw	2
	.dw	4
	.dw	Int_dispTab
	.dw	2
	.dw	-1
int_const1:
	.dw	2
	.dw	4
	.dw	Int_dispTab
	.dw	20
	.dw	-1
int_const0:
	.dw	2
	.dw	4
	.dw	Int_dispTab
	.dw	10
	.dw	-1
bool_const0:
	.dw	3
	.dw	4
	.dw	Bool_dispTab
	.dw	0
	.dw	-1
bool_const1:
	.dw	3
	.dw	4
	.dw	Bool_dispTab
	.dw	1
	.dw	-1
Object_protObj:
	.dw	0
	.dw	6
	.dw	Object_dispTab
	.dw	-1
IO_protObj:
	.dw	1
	.dw	6
	.dw	IO_dispTab
	.dw	-1
Main_protObj:
	.dw	5
	.dw	30
	.dw	Main_dispTab
	.dw	0
	.dw	0
	.dw	0
	.dw	0
	.dw	0
	.dw	0
	.dw	0
	.dw	0
	.dw	0
	.dw	0
	.dw	0
	.dw	0
	.dw	-1
A_protObj:
	.dw	6
	.dw	38
	.dw	A_dispTab
	.dw	0
	.dw	0
	.dw	0
	.dw	0
	.dw	0
	.dw	0
	.dw	0
	.dw	0
	.dw	0
	.dw	0
	.dw	0
	.dw	0
	.dw	0
	.dw	0
	.dw	0
	.dw	0
	.dw	-1
Int_protObj:
	.dw	2
	.dw	4
	.dw	Int_dispTab
	.dw	0
	.dw	-1
Bool_protObj:
	.dw	3
	.dw	4
	.dw	Bool_dispTab
	.dw	0
	.dw	-1
String_protObj:
	.dw	4
	.dw	5	
	.dw	String_dispTab
	.dw	int_const3
	.dw	0
Object_dispTab:
	.dw	Object.abort
	.dw	Object.type_name
	.dw	Object.copy
IO_dispTab:
	.dw	Object.abort
	.dw	Object.type_name
	.dw	Object.copy
	.dw	IO.out_string
	.dw	IO.out_int
	.dw	IO.in_string
	.dw	IO.in_int
Main_dispTab:
	.dw	Object.abort
	.dw	Object.type_name
	.dw	Object.copy
	.dw	IO.out_string
	.dw	IO.out_int
	.dw	IO.in_string
	.dw	IO.in_int
	.dw	Main.test_let
	.dw	Main.print_5i
	.dw	Main.reset_int
	.dw	Main.test_eval_orders
	.dw	Main.test_void
	.dw	Main.main
A_dispTab:
	.dw	Object.abort
	.dw	Object.type_name
	.dw	Object.copy
	.dw	IO.out_string
	.dw	IO.out_int
	.dw	IO.in_string
	.dw	IO.in_int
	.dw	Main.test_let
	.dw	Main.print_5i
	.dw	Main.reset_int
	.dw	Main.test_eval_orders
	.dw	Main.test_void
	.dw	Main.main
Int_dispTab:
	.dw	Object.abort
	.dw	Object.type_name
	.dw	Object.copy
Bool_dispTab:
	.dw	Object.abort
	.dw	Object.type_name
	.dw	Object.copy
String_dispTab:
	.dw	Object.abort
	.dw	Object.type_name
	.dw	Object.copy
	.dw	String.length
	.dw	String.concat
	.dw	String.substr
class_objTab:
	.dw	Object_protObj
	.dw	Object_init
	.dw	IO_protObj
	.dw	IO_init
	.dw	Int_protObj
	.dw	Int_init
	.dw	Bool_protObj
	.dw	Bool_init
	.dw	String_protObj
	.dw	String_init
	.dw	Main_protObj
	.dw	Main_init
	.dw	A_protObj
	.dw	A_init
	.dw	-1
str_const22:
	.dw	4
	.dw	8
	.dw	String_dispTab
	.dw	int_const17
	.db	"Object"
	.db	0	
	.dw	-1
int_const17:
	.dw	2
	.dw	4
	.dw	Int_dispTab
	.dw	6
	.dw	-1
str_const23:
	.dw	4
	.dw	6
	.dw	String_dispTab
	.dw	int_const2
	.db	"IO"
	.db	0	
	.dw	-1
str_const24:
	.dw	4
	.dw	6
	.dw	String_dispTab
	.dw	int_const18
	.db	"Int"
	.db	0	
	.dw	-1
int_const18:
	.dw	2
	.dw	4
	.dw	Int_dispTab
	.dw	3
	.dw	-1
str_const25:
	.dw	4
	.dw	7
	.dw	String_dispTab
	.dw	int_const19
	.db	"Bool"
	.db	0	
	.dw	-1
int_const19:
	.dw	2
	.dw	4
	.dw	Int_dispTab
	.dw	4
	.dw	-1
str_const26:
	.dw	4
	.dw	8
	.dw	String_dispTab
	.dw	int_const17
	.db	"String"
	.db	0	
	.dw	-1
str_const27:
	.dw	4
	.dw	7
	.dw	String_dispTab
	.dw	int_const19
	.db	"Main"
	.db	0	
	.dw	-1
str_const28:
	.dw	4
	.dw	5
	.dw	String_dispTab
	.dw	int_const4
	.db	"A"
	.db	0	
class_nameTab:
	.dw	str_const22
	.dw	str_const23
	.dw	str_const24
	.dw	str_const25
	.dw	str_const26
	.dw	str_const27
	.dw	str_const28
Object_init:
	ret	
IO_init:
	push	iy
	push	ix
	ld	iy,0
	add	iy,sp
	ex	de,hl
	ld	ixh,d
	ld	ixl,e
	ld	hl,0
	add	hl,sp
	ld	sp,hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	call	Object_init
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	ld	sp,iy
	pop	ix
	pop	iy
	ret	
Main_init:
	push	iy
	push	ix
	ld	iy,0
	add	iy,sp
	ex	de,hl
	ld	ixh,d
	ld	ixl,e
	ld	hl,65532
	add	hl,sp
	ld	sp,hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	call	IO_init
	ld	hl,Int_protObj
	call	Object.copy
	push	hl
	ld	hl,int_const0
	push	hl
	ld	hl,int_const1
	pop	de
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ex	de,hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ex	de,hl
	add	hl,bc
	ex	de,hl
	pop	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	(hl),e
	inc	hl
	ld	(hl),d
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ld	(ix+6),l
	ld	(ix+6),h
	ld	hl,0
	ld	(ix+8),l
	ld	(ix+8),h
	ld	hl,0
	ld	(ix+10),l
	ld	(ix+10),h
	ld	l,(ix+6)
	ld	h,(ix+6)
	xor	a
	or	h
	or	l
	ld	hl,bool_const1
	jr	nz,label2
	ld	hl,bool_const0
label2:
	ld	(ix+12),l
	ld	(ix+12),h
	ld	hl,bool_const0
	ld	(iy-2),l
	ld	(iy-2),h
	ld	hl,bool_const0
	ld	(iy-4),l
	ld	(iy-4),h
	ld	l,(iy-4)
	ld	h,(iy-4)
	ld	(iy-2),l
	ld	(iy-2),h
	ld	(ix+14),l
	ld	(ix+14),h
	ld	hl,int_const3
	ld	(ix+16),l
	ld	(ix+16),h
	ld	l,(ix+16)
	ld	h,(ix+16)
	ld	(ix+18),l
	ld	(ix+18),h
	ld	hl,Int_protObj
	call	Object.copy
	push	hl
	ld	l,(ix+16)
	ld	h,(ix+16)
	push	hl
	ld	l,(ix+18)
	ld	h,(ix+18)
	pop	de
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ex	de,hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ex	de,hl
	add	hl,bc
	ex	de,hl
	pop	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	(hl),e
	inc	hl
	ld	(hl),d
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ld	(ix+20),l
	ld	(ix+20),h
	ld	hl,Int_protObj
	call	Object.copy
	push	hl
	ld	l,(ix+18)
	ld	h,(ix+18)
	push	hl
	ld	l,(ix+20)
	ld	h,(ix+20)
	pop	de
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ex	de,hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ex	de,hl
	add	hl,bc
	ex	de,hl
	pop	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	(hl),e
	inc	hl
	ld	(hl),d
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ld	(ix+22),l
	ld	(ix+22),h
	ld	hl,Int_protObj
	call	Object.copy
	push	hl
	ld	l,(ix+20)
	ld	h,(ix+20)
	push	hl
	ld	l,(ix+22)
	ld	h,(ix+22)
	pop	de
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ex	de,hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ex	de,hl
	add	hl,bc
	ex	de,hl
	pop	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	(hl),e
	inc	hl
	ld	(hl),d
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ld	(ix+24),l
	ld	(ix+24),h
	ld	hl,0
	ld	(ix+26),l
	ld	(ix+26),h
	ld	hl,0
	ld	(ix+28),l
	ld	(ix+28),h
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	ld	sp,iy
	pop	ix
	pop	iy
	ret	
A_init:
	push	iy
	push	ix
	ld	iy,0
	add	iy,sp
	ex	de,hl
	ld	ixh,d
	ld	ixl,e
	ld	hl,0
	add	hl,sp
	ld	sp,hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	call	Main_init
	ld	l,(ix+6)
	ld	h,(ix+6)
	ld	(ix+30),l
	ld	(ix+30),h
	ld	hl,int_const1
	ld	(ix+32),l
	ld	(ix+32),h
	ld	hl,str_const19
	ld	(ix+34),l
	ld	(ix+34),h
	ld	l,(ix+8)
	ld	h,(ix+8)
	xor	a
	or	h
	or	l
	jr	z,label10
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,24
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label9
	push	de
	push	bc
	ret	
label10:
	ld	de,94
	ld	hl,str_const0
	jp	_dispatch_abort
label9:
	ld	(ix+36),l
	ld	(ix+36),h
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	ld	sp,iy
	pop	ix
	pop	iy
	ret	
Int_init:
	push	iy
	push	ix
	ld	iy,0
	add	iy,sp
	ex	de,hl
	ld	ixh,d
	ld	ixl,e
	ld	hl,0
	add	hl,sp
	ld	sp,hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	call	Object_init
	ld	hl,0
	ld	(ix+6),l
	ld	(ix+6),h
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	ld	sp,iy
	pop	ix
	pop	iy
	ret	
Bool_init:
	push	iy
	push	ix
	ld	iy,0
	add	iy,sp
	ex	de,hl
	ld	ixh,d
	ld	ixl,e
	ld	hl,0
	add	hl,sp
	ld	sp,hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	call	Object_init
	ld	hl,0
	ld	(ix+6),l
	ld	(ix+6),h
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	ld	sp,iy
	pop	ix
	pop	iy
	ret	
String_init:
	push	iy
	push	ix
	ld	iy,0
	add	iy,sp
	ex	de,hl
	ld	ixh,d
	ld	ixl,e
	ld	hl,0
	add	hl,sp
	ld	sp,hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	call	Object_init
	ld	hl,int_const3
	ld	(ix+6),l
	ld	(ix+6),h
	ld	hl,0
	ld	(ix+8),l
	ld	(ix+8),h
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	ld	sp,iy
	pop	ix
	pop	iy
	ret	
Main.test_let:
	push	iy
	push	ix
	ld	iy,0
	add	iy,sp
	ex	de,hl
	ld	ixh,d
	ld	ixl,e
	ld	hl,str_const1
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label12
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,6
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label11
	push	de
	push	bc
	ret	
label12:
	ld	de,15
	ld	hl,str_const0
	jp	_dispatch_abort
label11:
	ld	hl,str_const2
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label14
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,6
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label13
	push	de
	push	bc
	ret	
label14:
	ld	de,16
	ld	hl,str_const0
	jp	_dispatch_abort
label13:
	ld	l,(ix+6)
	ld	h,(ix+6)
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label16
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,8
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label15
	push	de
	push	bc
	ret	
label16:
	ld	de,16
	ld	hl,str_const0
	jp	_dispatch_abort
label15:
	ld	hl,str_const3
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label18
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,6
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label17
	push	de
	push	bc
	ret	
label18:
	ld	de,16
	ld	hl,str_const0
	jp	_dispatch_abort
label17:
	ld	hl,Int_protObj
	call	Object.copy
	push	hl
	ld	l,(ix+6)
	ld	h,(ix+6)
	push	hl
	ld	hl,int_const2
	pop	de
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ex	de,hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ex	de,hl
	ld	c,h
	ld	a,l
	call	MUL_DE_A
	call	MUL_C_D
	ld	d,a
	ld	e,0
	add	hl,de
	ex	de,hl
	pop	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	(hl),e
	inc	hl
	ld	(hl),d
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ld	(iy-2),l
	ld	(iy-2),h
	ld	hl,Int_protObj
	call	Object.copy
	push	hl
	ld	l,(iy-2)
	ld	h,(iy-2)
	push	hl
	ld	hl,int_const2
	pop	de
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ex	de,hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ex	de,hl
	ld	c,h
	ld	a,l
	call	MUL_DE_A
	call	MUL_C_D
	ld	d,a
	ld	e,0
	add	hl,de
	ex	de,hl
	pop	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	(hl),e
	inc	hl
	ld	(hl),d
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ld	(iy-4),l
	ld	(iy-4),h
	ld	hl,Int_protObj
	call	Object.copy
	push	hl
	ld	l,(iy-4)
	ld	h,(iy-4)
	push	hl
	ld	hl,int_const2
	pop	de
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ex	de,hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ex	de,hl
	ld	c,h
	ld	a,l
	call	MUL_DE_A
	call	MUL_C_D
	ld	d,a
	ld	e,0
	add	hl,de
	ex	de,hl
	pop	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	(hl),e
	inc	hl
	ld	(hl),d
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ld	(iy-6),l
	ld	(iy-6),h
	ld	l,(iy-6)
	ld	h,(iy-6)
	ld	(ix+6),l
	ld	(ix+6),h
	ld	hl,str_const4
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label26
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,6
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label25
	push	de
	push	bc
	ret	
label26:
	ld	de,19
	ld	hl,str_const0
	jp	_dispatch_abort
label25:
	ld	l,(ix+6)
	ld	h,(ix+6)
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label28
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,8
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label27
	push	de
	push	bc
	ret	
label28:
	ld	de,19
	ld	hl,str_const0
	jp	_dispatch_abort
label27:
	ld	hl,str_const3
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label30
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,6
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label29
	push	de
	push	bc
	ret	
label30:
	ld	de,19
	ld	hl,str_const0
	jp	_dispatch_abort
label29:
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	ld	hl,20
	add	hl,sp
	ret	
Main.print_5i:
	push	iy
	push	ix
	ld	iy,0
	add	iy,sp
	ex	de,hl
	ld	ixh,d
	ld	ixl,e
	ld	l,(iy+18)
	ld	h,(iy+18)
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label32
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,8
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label31
	push	de
	push	bc
	ret	
label32:
	ld	de,31
	ld	hl,str_const0
	jp	_dispatch_abort
label31:
	ld	l,(iy+16)
	ld	h,(iy+16)
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label34
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,8
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label33
	push	de
	push	bc
	ret	
label34:
	ld	de,31
	ld	hl,str_const0
	jp	_dispatch_abort
label33:
	ld	l,(iy+14)
	ld	h,(iy+14)
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label36
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,8
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label35
	push	de
	push	bc
	ret	
label36:
	ld	de,31
	ld	hl,str_const0
	jp	_dispatch_abort
label35:
	ld	l,(iy+12)
	ld	h,(iy+12)
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label38
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,8
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label37
	push	de
	push	bc
	ret	
label38:
	ld	de,31
	ld	hl,str_const0
	jp	_dispatch_abort
label37:
	ld	l,(iy+10)
	ld	h,(iy+10)
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label40
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,8
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label39
	push	de
	push	bc
	ret	
label40:
	ld	de,31
	ld	hl,str_const0
	jp	_dispatch_abort
label39:
	ld	l,(iy+18)
	ld	h,(iy+18)
	ld	hl,8
	add	hl,sp
	ret	
Main.reset_int:
	push	iy
	push	ix
	ld	iy,0
	add	iy,sp
	ex	de,hl
	ld	ixh,d
	ld	ixl,e
	ld	hl,int_const3
	ld	(ix+6),l
	ld	(ix+6),h
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	ld	hl,8
	add	hl,sp
	ret	
Main.test_eval_orders:
	push	iy
	push	ix
	ld	iy,0
	add	iy,sp
	ex	de,hl
	ld	ixh,d
	ld	ixl,e
	ld	hl,str_const5
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label42
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,6
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label41
	push	de
	push	bc
	ret	
label42:
	ld	de,37
	ld	hl,str_const0
	jp	_dispatch_abort
label41:
	ld	l,(ix+16)
	ld	h,(ix+16)
	push	hl
	ld	l,(ix+18)
	ld	h,(ix+18)
	push	hl
	ld	l,(ix+20)
	ld	h,(ix+20)
	push	hl
	ld	l,(ix+22)
	ld	h,(ix+22)
	push	hl
	ld	l,(ix+24)
	ld	h,(ix+24)
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label44
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,16
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label43
	push	de
	push	bc
	ret	
label44:
	ld	de,37
	ld	hl,str_const0
	jp	_dispatch_abort
label43:
	ld	hl,str_const3
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label46
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,6
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label45
	push	de
	push	bc
	ret	
label46:
	ld	de,37
	ld	hl,str_const0
	jp	_dispatch_abort
label45:
	ld	hl,str_const6
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label48
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,6
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label47
	push	de
	push	bc
	ret	
label48:
	ld	de,38
	ld	hl,str_const0
	jp	_dispatch_abort
label47:
	ld	l,(ix+16)
	ld	h,(ix+16)
	ld	(ix+18),l
	ld	(ix+18),h
	push	hl
	ld	l,(ix+18)
	ld	h,(ix+18)
	ld	(ix+20),l
	ld	(ix+20),h
	push	hl
	ld	l,(ix+20)
	ld	h,(ix+20)
	ld	(ix+22),l
	ld	(ix+22),h
	push	hl
	ld	l,(ix+22)
	ld	h,(ix+22)
	ld	(ix+24),l
	ld	(ix+24),h
	push	hl
	ld	l,(ix+24)
	ld	h,(ix+24)
	ld	(ix+16),l
	ld	(ix+16),h
	push	hl
	ld	l,(ix+0)
	ld	h,(ix+0)
	add	hl,hl
	add	hl,hl
	ld	de,class_objTab
	add	hl,de
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	ex	de,hl
	push	de
	call	Object.copy
	pop	de
	inc	de
	inc	de
	ex	de,hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,label53
	push	hl
	push	bc
	ex	de,hl
	ret	
	xor	a
	or	h
	or	l
	jr	z,label52
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,18
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label51
	push	de
	push	bc
	ret	
label52:
	ld	de,39
	ld	hl,str_const0
	jp	_dispatch_abort
label51:
	xor	a
	or	h
	or	l
	jr	z,label50
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,16
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label49
	push	de
	push	bc
	ret	
label50:
	ld	de,39
	ld	hl,str_const0
	jp	_dispatch_abort
label49:
	ld	hl,str_const3
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label55
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,6
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label54
	push	de
	push	bc
	ret	
label55:
	ld	de,40
	ld	hl,str_const0
	jp	_dispatch_abort
label54:
	ld	hl,str_const7
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label57
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,6
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label56
	push	de
	push	bc
	ret	
label57:
	ld	de,41
	ld	hl,str_const0
	jp	_dispatch_abort
label56:
	ld	hl,int_const3
	ld	(ix+16),l
	ld	(ix+16),h
	ld	hl,Int_protObj
	call	Object.copy
	push	hl
	ld	hl,Int_protObj
	call	Object.copy
	push	hl
	ld	l,(ix+16)
	ld	h,(ix+16)
	push	hl
	ld	hl,int_const4
	pop	de
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ex	de,hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ex	de,hl
	add	hl,bc
	ex	de,hl
	pop	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	(hl),e
	inc	hl
	ld	(hl),d
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ld	(ix+16),l
	ld	(ix+16),h
	push	hl
	ld	l,(ix+16)
	ld	h,(ix+16)
	pop	de
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ex	de,hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	ex	de,hl
	ld	c,h
	ld	a,l
	call	MUL_DE_A
	call	MUL_C_D
	ld	d,a
	ld	e,0
	add	hl,de
	ex	de,hl
	pop	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	(hl),e
	inc	hl
	ld	(hl),d
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	dec	hl
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label59
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,8
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label58
	push	de
	push	bc
	ret	
label59:
	ld	de,43
	ld	hl,str_const0
	jp	_dispatch_abort
label58:
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	ld	hl,8
	add	hl,sp
	ret	
Main.test_void:
	push	iy
	push	ix
	ld	iy,0
	add	iy,sp
	ex	de,hl
	ld	ixh,d
	ld	ixl,e
	ld	l,(ix+26)
	ld	h,(ix+26)
	xor	a
	or	h
	or	l
	ld	hl,bool_const1
	jr	nz,label66
	ld	hl,bool_const0
label66:
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	dec	de
	dec	de
	dec	de
	dec	de
	dec	de
	dec	de
	xor	a
	or	d
	or	e
	jp	z,label64
	ld	hl,str_const8
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label68
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,6
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label67
	push	de
	push	bc
	ret	
label68:
	ld	de,52
	ld	hl,str_const0
	jp	_dispatch_abort
label67:
	jp	label65
label64:
	ld	hl,str_const9
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label70
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,6
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label69
	push	de
	push	bc
	ret	
label70:
	ld	de,53
	ld	hl,str_const0
	jp	_dispatch_abort
label69:
label65:
label74:
	ld	hl,bool_const0
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	dec	bc
	dec	bc
	dec	bc
	dec	bc
	dec	bc
	dec	bc
	xor	a
	or	b
	or	c
	jp	z,label75
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	jp	label74
label75:
	ld	hl,0
	xor	a
	or	h
	or	l
	ld	hl,bool_const1
	jr	nz,label73
	ld	hl,bool_const0
label73:
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	dec	de
	dec	de
	dec	de
	dec	de
	dec	de
	dec	de
	xor	a
	or	d
	or	e
	jp	z,label71
	ld	hl,str_const10
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label77
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,6
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label76
	push	de
	push	bc
	ret	
label77:
	ld	de,56
	ld	hl,str_const0
	jp	_dispatch_abort
label76:
	jp	label72
label71:
	ld	hl,str_const11
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label79
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,6
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label78
	push	de
	push	bc
	ret	
label79:
	ld	de,57
	ld	hl,str_const0
	jp	_dispatch_abort
label78:
label72:
	ld	l,(ix+26)
	ld	h,(ix+26)
	push	hl
	ld	hl,Object_protObj
	call	Object.copy
	call	Object_init
	pop	de
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	dec	bc
	dec	bc
	dec	bc
	dec	bc
	dec	bc
	dec	bc
	ex	de,hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	dec	de
	dec	de
	dec	de
	dec	de
	dec	de
	dec	de
	ex	de,hl
	scf
	ccf
	sbc	hl,bc
	ld	hl,bool_const1
	jr	z,label83
	ld	hl,bool_const0
label83:
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	dec	de
	dec	de
	dec	de
	dec	de
	dec	de
	dec	de
	xor	a
	or	d
	or	e
	jp	z,label80
	ld	hl,str_const12
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label85
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,6
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label84
	push	de
	push	bc
	ret	
label85:
	ld	de,60
	ld	hl,str_const0
	jp	_dispatch_abort
label84:
	jp	label81
label80:
	ld	hl,str_const13
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label87
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,6
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label86
	push	de
	push	bc
	ret	
label87:
	ld	de,61
	ld	hl,str_const0
	jp	_dispatch_abort
label86:
label81:
	ld	l,(ix+26)
	ld	h,(ix+26)
	push	hl
	ld	l,(ix+28)
	ld	h,(ix+28)
	pop	de
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	dec	bc
	dec	bc
	dec	bc
	dec	bc
	dec	bc
	dec	bc
	ex	de,hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	dec	de
	dec	de
	dec	de
	dec	de
	dec	de
	dec	de
	ex	de,hl
	scf
	ccf
	sbc	hl,bc
	ld	hl,bool_const1
	jr	z,label91
	ld	hl,bool_const0
label91:
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	dec	de
	dec	de
	dec	de
	dec	de
	dec	de
	dec	de
	xor	a
	or	d
	or	e
	jp	z,label88
	ld	hl,str_const14
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label93
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,6
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label92
	push	de
	push	bc
	ret	
label93:
	ld	de,64
	ld	hl,str_const0
	jp	_dispatch_abort
label92:
	jp	label89
label88:
	ld	hl,str_const15
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label95
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,6
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label94
	push	de
	push	bc
	ret	
label95:
	ld	de,65
	ld	hl,str_const0
	jp	_dispatch_abort
label94:
label89:
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	ld	hl,8
	add	hl,sp
	ret	
Main.main:
	push	iy
	push	ix
	ld	iy,0
	add	iy,sp
	ex	de,hl
	ld	ixh,d
	ld	ixl,e
	ld	hl,str_const16
	push	hl
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label97
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,6
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label96
	push	de
	push	bc
	ret	
label97:
	ld	de,70
	ld	hl,str_const0
	jp	_dispatch_abort
label96:
	ld	l,(ix+6)
	ld	h,(ix+6)
	xor	a
	or	h
	or	l
	jp	z,label104
	push	hl
	ld	de,0
	add	hl,de
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	ld	hl,inheritance_tree
	ex	de,hl
	add	hl,hl
	add	hl,hl
	add	hl,de
	ld	hl,label105
label98:
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	bit	7,b
	jr	nz,label103
	push	de
	ex	de,hl
label100:
	ld	a,c
	cp	(hl)
	jr	nz,label101
	ld	a,b
	inc	hl
	cp	(hl)
	jr	z,label102
label101:
	inc	hl
	push	bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	xor	a
	or	b
	or	c
	add	hl,bc
	pop	bc
	jr	nz,label100
label99:
	ex	de,hl
	pop	de
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	jr	label98
label102:
	ex	de,hl
	pop	bc
	inc	hl
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	pop	bc
	ex	de,hl
	ld	de,label106
	push	de
	jp	(hl)
label103:
	pop	hl
	jp	_case_abort
label104:
	ld	hl,str_const0
	ld	de,71
	jp	_case_abort2
label105:
	.dw	2
	.dw	label107
	.dw	-1
label106:
	ld	l,(ix+0)
	ld	h,(ix+0)
	add	hl,hl
	add	hl,hl
	ld	de,class_objTab
	add	hl,de
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	ex	de,hl
	push	de
	call	Object.copy
	pop	de
	inc	de
	inc	de
	ex	de,hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,label118
	push	hl
	push	bc
	ex	de,hl
	ret	
	xor	a
	or	h
	or	l
	jp	z,label115
	push	hl
	ld	de,0
	add	hl,de
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	ld	hl,inheritance_tree
	ex	de,hl
	add	hl,hl
	add	hl,hl
	add	hl,de
	ld	hl,label116
label109:
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	bit	7,b
	jr	nz,label114
	push	de
	ex	de,hl
label111:
	ld	a,c
	cp	(hl)
	jr	nz,label112
	ld	a,b
	inc	hl
	cp	(hl)
	jr	z,label113
label112:
	inc	hl
	push	bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	xor	a
	or	b
	or	c
	add	hl,bc
	pop	bc
	jr	nz,label111
label110:
	ex	de,hl
	pop	de
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	jr	label109
label113:
	ex	de,hl
	pop	bc
	inc	hl
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	pop	bc
	ex	de,hl
	ld	de,label117
	push	de
	jp	(hl)
label114:
	pop	hl
	jp	_case_abort
label115:
	ld	hl,str_const0
	ld	de,76
	jp	_case_abort2
label116:
	.dw	-1
label117:
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label121
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,14
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label120
	push	de
	push	bc
	ret	
label121:
	ld	de,82
	ld	hl,str_const0
	jp	_dispatch_abort
label120:
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label123
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,20
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label122
	push	de
	push	bc
	ret	
label123:
	ld	de,83
	ld	hl,str_const0
	jp	_dispatch_abort
label122:
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	xor	a
	or	h
	or	l
	jr	z,label125
	ld	de,4
	ex	de,hl
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	hl,22
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ex	de,hl
	ld	de,label124
	push	de
	push	bc
	ret	
label125:
	ld	de,84
	ld	hl,str_const0
	jp	_dispatch_abort
label124:
	ld	d,ixh
	ld	e,ixl
	ex	de,hl
	ld	hl,8
	add	hl,sp
	ret	
MUL_DE_A:
	ld	hl,0
	ld	b,8
MUL_DE_A_loop:
	add	hl,hl
	rlca
	jr	nc,MUL_DE_A_skip
	add	hl,de
MUL_DE_A_skip:
	djnz	MUL_DE_A_loop
	ret	
MUL_C_D:
	xor	a
	ld	b,8
MUL_C_D_loop:
	add	a,a
	jr	nc,MUL_C_D_skip
MUL_C_D_skip:
	djnz	MUL_C_D_loop
	ret	
DIV_HL_D:
	xor	a
	ld	b,16
DIV_HL_D_loop:
	add	hl,hl
	rla
	jr	c,DIV_HL_D_skip
DIV_HL_D_overflow:
	sub	d
	inc	l
DIV_HL_D_skip:
	djnz	DIV_HL_D_loop
	ret	
DIV_HL_DE:
	xor	a
	ld	bc,0
	push	bc
	ld	b,16
DIV_HL_DE_loop:
	add	hl,hl
	ex	(sp),hl
	rl	l
	rl	h
	jr	c,DIV_HL_DE_overflow
	ld	a,h
	cp	d
	jr	c,DIV_HL_DE_skip
	ld	a,l
	cp	e
	jr	c,DIV_HL_DE_skip
DIV_HL_DE_overflow:
	scf
	ccf
	sbc	hl,de
	ex	(sp),hl
	inc	hl
	djnz	DIV_HL_DE_loop
	ret	
DIV_HL_DE_skip:
	ex	(sp),hl
	djnz	DIV_HL_DE_loop
	ret	
;; routines.asm
;; routines
;;
;; Created by Nicholas Mosier on 08/30/2018


; #include "ti83plus.inc"
; .org $9D93
; .db $BB,$6D ; AsmPrgm

;;; EQUATES ;;;
_MEMORY_SIZE equ $2000 ; 8 KB

_memory_create_appvar:
	; first check if memory var already exists. If so, resize
	ld hl,_memory_appvar_sym
	bcall(_Mov9ToOP1)
	bcall(_ChkFindSym)
	jr c, _memory_create_appvar_notfound ; skip ahead if not found
	; otherwise, check size of memory block
	; test b: b ≠ 0 if archived
	ld a,b
	or a
	jr z,_memory_create_appvar_inRAM
	bcall(_Arc_Unarc)
	ld hl,_memory_appvar_sym
	bcall(_Mov9ToOP1)
	bcall(_ChkFindSym)
_memory_create_appvar_inRAM:
	; de = ptr to beginning of heap
	push de
	ex de,hl
	ld e,(hl)
	inc hl
	ld d,(hl) ; de = size
	ld hl,-(_MEMORY_SIZE)
	add hl,de
	jr z,_memory_create_appvar_done
_memory_delete_appvar:
	ld hl,_memory_appvar_sym
	bcall(_Mov9ToOP1)
	bcall(_ChkFindSym)
	bcall(_DelVar)
	jr _memory_create_appvar_notfound
_memory_create_appvar_done:
	pop de
	inc de
	inc de
	ret  ; de = pointer to beginning of appvar
	
_memory_create_appvar_notfound:
	ld hl,_MEMORY_SIZE+2 ; for size bytes
	bcall(_CreateAppVar)
	inc de
	inc de	
	
	
_memory_initialize:
	call _memory_create_appvar
	ld (_memory_begin),hl
	ld (_memory_free),hl
	ld de,_MEMORY_SIZE
	add hl,de
	ld (_memory_end),hl
	ld hl,_memory_flags
	set _memory_init_f,(hl)
	ret
	
	
;; INPUTS: hl = size to allocate
;; OUTPUTS: hl = pointer to memory
_malloc:
	ld a,(_memory_flags)
	bit _memory_init_f,a
	call z,_memory_create_appvar
	
	ld bc,(_memory_free)
	add hl,bc ; hl = new free pointer
	ex de,hl
	ld hl,(_memory_end)
	scf
	ccf
	sbc hl,de
	jr c,_malloc_out_of_mem
	
	ex de,hl
	ld (_memory_free),hl
	ld h,b
	ld l,c
	ret
	
_malloc_out_of_mem:
	ld hl,0
	ld (curRow),hl
	ld hl,_malloc_out_of_mem_msg
	bcall(_PutS)
	ld hl,0 ; null ptr
	ret
	
	
_memory_flags: .db 0
_memory_init_f equ 0
_memory_begin: .dw 0
_memory_free:  .dw 0
_memory_end:   .dw 0

_malloc_out_of_mem_msg: .db "malloc: out of mem.",0

_memory_appvar_sym:
	.db AppVarObj
	.db "COOL",0
Object.copy:
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ex	de,hl
	inc	hl
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ex	de,hl
	call	_malloc
	ret	
